package tree;
 
public class ConstructBinaryTreeFromInorderAndPreOrderTraversal {
  
 public static void main(String[] args) {
  new ConstructBinaryTreeFromInorderAndPreOrderTraversal();
 }
 
 public ConstructBinaryTreeFromInorderAndPreOrderTraversal() {
  int inorder[] =  {20, 30, 35, 40, 45, 50, 55, 60, 70};
  int preorder[] = {50, 40, 30, 20, 35, 45, 60, 55, 70};
 
  Node n = constructTree(inorder, preorder);
  System.out.println(n);
 }
 
 private static Node constructTree(int[] inorder, int[] preorder) {
  return constructTreeFromInOrderAndPreOrder(inorder, 0, inorder.length-1, preorder, 0, preorder.length-1);
 }
  
 private static Node constructTreeFromInOrderAndPreOrder(int[] inorder, int inStart, int inEnd, int[] preorder, int preStart, int preEnd) {
  if(inStart>inEnd){
   return null;
  }
 
  if(inStart==inEnd){
   return new Node(inorder[inStart]);
  }
   
  Node node = new Node(preorder[preStart]);
 
  int index=0;
  for (int i = 0; i < inorder.length-1; i++) {
   if(preorder[preStart]==inorder[i]){
    index = i;
    break;
   }  
  }
 
  node.setLeft(constructTreeFromInOrderAndPreOrder(inorder, inStart, index-1, preorder, preStart+1, preStart+index));
  node.setRight(constructTreeFromInOrderAndPreOrder(inorder, index+1, inEnd, preorder, preStart+index+1, preEnd));
 
  return node;
 }
}


class Node{
 private int data;
 private Node left;
 private Node right;
 private Node nextRight;
 
 public Node(int data) {
  this.data=data;
 }
 
 public int getData() {
  return data;
 }
 public void setData(int data) {
  this.data = data;
 }
 public Node getLeft() {
  return left;
 }
 public void setLeft(Node left) {
  this.left = left;
 }
 public Node getRight() {
  return right;
 }
 public void setRight(Node right) {
  this.right = right;
 }
 public Node getNextRight() {
  return nextRight;
 }
 public void setNextRight(Node nextRight) {
  this.nextRight = nextRight;
 }
}